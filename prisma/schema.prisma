generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Herb {
  id                  Int       @id @default(autoincrement())
  name                String?
  commonName          String?
  latinName           String?
  slug                String?   @unique
  description         String
  metaTitle           String?
  metaDescription     String?
  heroImageUrl        String?
  cardImageUrl        String?
  galleryImages       Json?
  cautions            String?
  productFormulations Json?
  references          Json?
  indications         Json?
  traditionalUses     Json?
  products            Product[] @relation("HerbProducts")
}

model Symptom {
  id                  Int       @id @default(autoincrement())
  slug                String    @unique
  title               String
  description         String?
  articles            Json?
  associatedSymptoms  Json?
  cautions            String?
  variants            Json?
  references          Json?
  variantDescriptions Json?
  products            Product[] @relation("SymptomProducts")
}

model Supplement {
  id                  Int       @id @default(autoincrement())
  name                String
  slug                String?   @unique
  description         String
  metaTitle           String?
  metaDescription     String?
  heroImageUrl        String?
  cardImageUrl        String?
  galleryImages       Json?
  cautions            String?
  productFormulations Json?
  references          Json?
  tags                Json?
  products            Product[] @relation("SupplementProducts")
}

model BlogPage {
  id         Int      @id @default(autoincrement())
  title      String
  fileUrl    String?
  uploadDate DateTime @default(now())
  adminNote  String?
  content    String?
}

model QualitySpecification {
  id                   Int    @id @default(autoincrement())
  herbSlug             String
  herbName             String
  productType          String
  requiredTerms        Json
  preferredTerms       Json
  avoidTerms           Json
  standardization      Json?
  alcoholSpecs         Json?
  dosageSpecs          Json?
  priceRange           Json
  ratingThreshold      Float
  reviewCountThreshold Int
  brandPreferences     Json?
  brandAvoid           Json?
}

model Merchant {
  id                   Int              @id @default(autoincrement())
  name                 String
  apiSource            String?
  logoUrl              String?
  websiteUrl           String?
  region               String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  defaultAffiliateRate Float?
  pendingProducts      PendingProduct[]
  products             Product[]
}

model PendingProduct {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  merchantId     Int
  affiliateLink  String
  price          Float?
  currency       String
  region         String?
  imageUrl       String?
  qualityScore   Int?
  rawApiData     Json?
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  herbId         Int?
  supplementId   Int?
  symptomId      Int?
  affiliateRate  Float?
  affiliateYield Float?
  merchant       Merchant @relation(fields: [merchantId], references: [id])
}

model Product {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  merchantId     Int
  affiliateLink  String
  price          Float?
  currency       String
  region         String?
  imageUrl       String?
  qualityScore   Int?
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  affiliateRate  Float?
  affiliateYield Float?
  merchant       Merchant     @relation(fields: [merchantId], references: [id])
  herbs          Herb[]       @relation("HerbProducts")
  supplements    Supplement[] @relation("SupplementProducts")
  symptoms       Symptom[]    @relation("SymptomProducts")
}
